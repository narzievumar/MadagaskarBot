import logging
import os
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters, ConversationHandler

# Loglarni sozlash
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Bot tokeni
TOKEN = "7237180635:AAEj_PRgvSSvhn9K_168Wpz703-lPIPG6W4"

# Xodimlar guruhining chat ID si (bu yerda o'zingizning guruh ID ni qo'ying)
GROUP_CHAT_ID = "-1002414904019"  # O'zingizning guruh ID ni bu yerga qo'ying, masalan: "-123456789"

# Yandex Maps API kaliti
YANDEX_API_KEY = "8cca7b48-8cf1-44ec-94fc-a5e4b22edb96"

# Foydalanuvchi ma'lumotlarini saqlash uchun lug'at
user_data = {}

# Buyurtma ID uchun global hisoblagich
order_counter = 0

# Holatlar (ConversationHandler uchun)
SELECTING_LANGUAGE, MAIN_MENU, MENU_CATEGORY, PRODUCT_SELECTION, ADDRESS_INPUT, PHONE_INPUT, PAYMENT_METHOD, CONFIRM_ORDER = range(8)

# Tillarni va matnlarni saqlash
texts = {
    "uz": {
        "welcome": "Assalomu alaykum! Madagaskar Land yetkazib berish xizmatiga xush kelibsiz.",
        "choose_language": "Tilni tanlang:",
        "menu": "üçΩ Menyu",
        "cart": "üõí Savat",
        "address": "üìç Manzil",
        "contact": "üìû Aloqa",
        "info": "‚ÑπÔ∏è Ma'lumot",
        "settings": "‚öôÔ∏è Sozlamalar",
        "back": "üîô Orqaga",
        "empty_cart": "Savatingiz bo'sh!",
        "cart_items": "üõí Savatingizdagi mahsulotlar:",
        "total": "Umumiy summa:",
        "clear_cart": "üßπ Savatni tozalash",
        "checkout": "‚úÖ Buyurtma berish",
        "enter_address": "Iltimos, yetkazib berish manzilingizni kiriting (faqat Navoiy shahar va Karmana tumani bo'yicha yetkazib berish mavjud):",
        "address_saved": "Manzil saqlandi:",
        "address_invalid": "Kechirasiz, faqat Navoiy shahar va Karmana tumani bo'yicha yetkazib berish mavjud. Iltimos, manzilingizni qayta kiriting:",
        "location_invalid": "Kechirasiz, bu joylashuv Navoiy shahar yoki Karmana tumanida emas. Iltimos, aniq manzil kiriting:",
        "location_error": "Joylashuvni aniqlashda xatolik yuz berdi. Iltimos, aniq manzil kiriting:",
        "enter_phone": "Iltimos, telefon raqamingizni kiriting yoki 'Raqamni ulashish' tugmasini bosing:",
        "phone_saved": "Telefon raqami saqlandi:",
        "contact_info": "üìû Biz bilan bog'lanish:",
        "phone": "‚òéÔ∏è Telefon:",
        "telegram": "üì± Telegram:",
        "website": "üåê Veb-sayt:",
        "location": "üìç Manzil:",
        "about_bot": "‚ÑπÔ∏è Bot haqida ma'lumot:",
        "about_text": "Bu bot Madagaskar Land restorani uchun yaratilgan. Bot orqali siz quyidagilarni amalga oshirishingiz mumkin:\n\n- Menyu ko'rish va buyurtma berish\n- Savatingizni boshqarish\n- Manzil va aloqa ma'lumotlarini ko'rish",
        "select_language": "‚öôÔ∏è Tilni tanlang:",
        "price": "üí∞ Narxi:",
        "description": "üìù Tavsif:",
        "add_to_cart": "üõí Savatga qo'shish",
        "added_to_cart": "savatga qo'shildi!",
        "categories": "Kategoriyani tanlang:",
        "order_success": "Buyurtmangiz qabul qilindi! Tez orada siz bilan bog'lanamiz.",
        "order_to_group": "Yangi buyurtma (ID: {order_id}):\n\n{details}",
        "unknown_command": "Tushunarsiz buyruq. Iltimos, menyudan foydalaning.",
        "share_location": "üìç Joylashuvni yuborish",
        "share_contact": "üì± Raqamni ulashish",
        "location_saved": "Joylashuvingiz saqlandi! ‚úÖ",
        "order_details": "üìã Buyurtma tafsilotlari (ID: {order_id}):",
        "confirm_order": "‚úÖ Buyurtmani tasdiqlash",
        "cancel_order": "‚ùå Bekor qilish",
        "select_payment": "To'lov usulini tanlang:",
        "payment_cash": "üíµ Naqd pul",
        "payment_click": "üí≥ Click",
        "payment_payme": "üí∏ Payme",
        "payment": "To'lov usuli:"
    },
    "ru": {
        "welcome": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É –¥–æ—Å—Ç–∞–≤–∫–∏ Madagaskar Land.",
        "choose_language": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "menu": "üçΩ –ú–µ–Ω—é",
        "cart": "üõí –ö–æ—Ä–∑–∏–Ω–∞",
        "address": "üìç –ê–¥—Ä–µ—Å",
        "contact": "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã",
        "info": "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        "settings": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        "back": "üîô –ù–∞–∑–∞–¥",
        "empty_cart": "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!",
        "cart_items": "üõí –¢–æ–≤–∞—Ä—ã –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ:",
        "total": "–û–±—â–∞—è —Å—É–º–º–∞:",
        "clear_cart": "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É",
        "checkout": "‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
        "enter_address": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–¥–æ—Å—Ç–∞–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ –≥–æ—Ä–æ–¥—É –ù–∞–≤–æ–∏ –∏ —Ä–∞–π–æ–Ω—É –ö–∞—Ä–º–∞–Ω–∞):",
        "address_saved": "–ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:",
        "address_invalid": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–æ—Å—Ç–∞–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ –≥–æ—Ä–æ–¥—É –ù–∞–≤–æ–∏ –∏ —Ä–∞–π–æ–Ω—É –ö–∞—Ä–º–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–Ω–æ–≤–∞:",
        "location_invalid": "–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ù–∞–≤–æ–∏ –∏–ª–∏ –ö–∞—Ä–º–∞–Ω–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å:",
        "location_error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å:",
        "enter_phone": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º':",
        "phone_saved": "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:",
        "contact_info": "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏:",
        "phone": "‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω:",
        "telegram": "üì± –¢–µ–ª–µ–≥—Ä–∞–º:",
        "website": "üåê –í–µ–±-—Å–∞–π—Ç:",
        "location": "üìç –ê–¥—Ä–µ—Å:",
        "about_bot": "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:",
        "about_text": "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ Madagaskar Land. –° –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ:\n\n- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–µ–Ω—é –∏ –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã\n- –£–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ—Ä–∑–∏–Ω–æ–π\n- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∞–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
        "select_language": "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "price": "üí∞ –¶–µ–Ω–∞:",
        "description": "üìù –û–ø–∏—Å–∞–Ω–∏–µ:",
        "add_to_cart": "üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
        "added_to_cart": "–¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!",
        "categories": "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        "order_success": "–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        "order_to_group": "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ (ID: {order_id}):\n\n{details}",
        "unknown_command": "–ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é.",
        "share_location": "üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
        "share_contact": "üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º",
        "location_saved": "–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! ‚úÖ",
        "order_details": "üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ (ID: {order_id}):",
        "confirm_order": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑",
        "cancel_order": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
        "select_payment": "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        "payment_cash": "üíµ –ù–∞–ª–∏—á–Ω—ã–µ",
        "payment_click": "üí≥ Click",
        "payment_payme": "üí∏ Payme",
        "payment": "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
    },
    "en": {
        "welcome": "Hello! Welcome to Madagaskar Land delivery service.",
        "choose_language": "Choose language:",
        "menu": "üçΩ Menu",
        "cart": "üõí Cart",
        "address": "üìç Address",
        "contact": "üìû Contact",
        "info": "‚ÑπÔ∏è Info",
        "settings": "‚öôÔ∏è Settings",
        "back": "üîô Back",
        "empty_cart": "Your cart is empty!",
        "cart_items": "üõí Items in your cart:",
        "total": "Total amount:",
        "clear_cart": "üßπ Clear cart",
        "checkout": "‚úÖ Checkout",
        "enter_address": "Please enter your delivery address (delivery is available only in Navoi city and Karmana district):",
        "address_saved": "Address saved:",
        "address_invalid": "Sorry, delivery is available only in Navoi city and Karmana district. Please enter your address again:",
        "location_invalid": "Sorry, this location is not in Navoi city or Karmana district. Please enter your exact address:",
        "location_error": "Error determining location. Please enter your exact address:",
        "enter_phone": "Please enter your phone number or press 'Share Contact' button:",
        "phone_saved": "Phone number saved:",
        "contact_info": "üìû Contact us:",
        "phone": "‚òéÔ∏è Phone:",
        "telegram": "üì± Telegram:",
        "website": "üåê Website:",
        "location": "üìç Location:",
        "about_bot": "‚ÑπÔ∏è About this bot:",
        "about_text": "This bot is created for Madagaskar Land restaurant. With this bot you can:\n\n- Browse menu and place orders\n- Manage your cart\n- View address and contact information",
        "select_language": "‚öôÔ∏è Select language:",
        "price": "üí∞ Price:",
        "description": "üìù Description:",
        "add_to_cart": "üõí Add to cart",
        "added_to_cart": "added to cart!",
        "categories": "Select a category:",
        "order_success": "Your order has been received! We will contact you soon.",
        "order_to_group": "New order (ID: {order_id}):\n\n{details}",
        "unknown_command": "Unknown command. Please use the menu.",
        "share_location": "üìç Share location",
        "share_contact": "üì± Share contact",
        "location_saved": "Your location has been saved! ‚úÖ",
        "order_details": "üìã Order details (ID: {order_id}):",
        "confirm_order": "‚úÖ Confirm order",
        "cancel_order": "‚ùå Cancel",
        "select_payment": "Select payment method:",
        "payment_cash": "üíµ Cash",
        "payment_click": "üí≥ Click",
        "payment_payme": "üí∏ Payme",
        "payment": "Payment method:"
    }
}

# Kategoriyalar
categories = {
    "uz": [["üçî Burgerlar", "üçï Pitsa"], ["ü•ó Salatlar", "üçπ Ichimliklar"], ["üîô Orqaga"]],
    "ru": [["üçî –ë—É—Ä–≥–µ—Ä—ã", "üçï –ü–∏—Ü—Ü–∞"], ["ü•ó –°–∞–ª–∞—Ç—ã", "üçπ –ù–∞–ø–∏—Ç–∫–∏"], ["üîô –ù–∞–∑–∞–¥"]],
    "en": [["üçî Burgers", "üçï Pizza"], ["ü•ó Salads", "üçπ Drinks"], ["üîô Back"]]
}

# Mahsulotlar
products = {
    "uz": {
        "üçî Burgerlar": [
            {"name": "Chizburger", "price": 30000, "description": "Klassik chizburger, mol go'shti, pishloq, pomidor va salat bilan"},
            {"name": "Doubl burger", "price": 45000, "description": "Ikki qavatli burger, maxsus sous bilan"}
        ],
        "üçï Pitsa": [
            {"name": "Margarita", "price": 60000, "description": "Pomidor, pishloq va rayhon bilan"},
            {"name": "Pepperoni", "price": 75000, "description": "Pepperoni kolbasa va pishloq bilan"}
        ],
        "ü•ó Salatlar": [
            {"name": "Sezar salati", "price": 35000, "description": "Tovuq, romano salati, sarimsoq va pishloq bilan"},
            {"name": "Yunon salati", "price": 30000, "description": "Bodring, pomidor, zaytun va feta pishlog'i bilan"}
        ],
        "üçπ Ichimliklar": [
            {"name": "Coca-Cola", "price": 12000, "description": "0.5L shishada"},
            {"name": "Mineral suv", "price": 8000, "description": "0.5L shishada"}
        ]
    },
    "ru": {
        "üçî –ë—É—Ä–≥–µ—Ä—ã": [
            {"name": "–ß–∏–∑–±—É—Ä–≥–µ—Ä", "price": 30000, "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —á–∏–∑–±—É—Ä–≥–µ—Ä —Å –≥–æ–≤—è–¥–∏–Ω–æ–π, —Å—ã—Ä–æ–º, –ø–æ–º–∏–¥–æ—Ä–∞–º–∏ –∏ —Å–∞–ª–∞—Ç–æ–º"},
            {"name": "–î–∞–±–ª –±—É—Ä–≥–µ—Ä", "price": 45000, "description": "–î–≤–æ–π–Ω–æ–π –±—É—Ä–≥–µ—Ä —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Å–æ—É—Å–æ–º"}
        ],
        "üçï –ü–∏—Ü—Ü–∞": [
            {"name": "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", "price": 60000, "description": "–° –ø–æ–º–∏–¥–æ—Ä–∞–º–∏, —Å—ã—Ä–æ–º –∏ –±–∞–∑–∏–ª–∏–∫–æ–º"},
            {"name": "–ü–µ–ø–ø–µ—Ä–æ–Ω–∏", "price": 75000, "description": "–° –∫–æ–ª–±–∞—Å–æ–π –ø–µ–ø–ø–µ—Ä–æ–Ω–∏ –∏ —Å—ã—Ä–æ–º"}
        ],
        "ü•ó –°–∞–ª–∞—Ç—ã": [
            {"name": "–°–∞–ª–∞—Ç –¶–µ–∑–∞—Ä—å", "price": 35000, "description": "–° –∫—É—Ä–∏—Ü–µ–π, —Å–∞–ª–∞—Ç–æ–º —Ä–æ–º–∞–Ω–æ, —á–µ—Å–Ω–æ–∫–æ–º –∏ —Å—ã—Ä–æ–º"},
            {"name": "–ì—Ä–µ—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç", "price": 30000, "description": "–° –æ–≥—É—Ä—Ü–∞–º–∏, –ø–æ–º–∏–¥–æ—Ä–∞–º–∏, –æ–ª–∏–≤–∫–∞–º–∏ –∏ —Å—ã—Ä–æ–º —Ñ–µ—Ç–∞"}
        ],
        "üçπ –ù–∞–ø–∏—Ç–∫–∏": [
            {"name": "–ö–æ–∫–∞-–ö–æ–ª–∞", "price": 12000, "description": "–í –±—É—Ç—ã–ª–∫–µ 0.5–õ"},
            {"name": "–ú–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–æ–¥–∞", "price": 8000, "description": "–í –±—É—Ç—ã–ª–∫–µ 0.5–õ"}
        ]
    },
    "en": {
        "üçî Burgers": [
            {"name": "Cheeseburger", "price": 30000, "description": "Classic cheeseburger with beef, cheese, tomatoes and lettuce"},
            {"name": "Double burger", "price": 45000, "description": "Double burger with special sauce"}
        ],
        "üçï Pizza": [
            {"name": "Margherita", "price": 60000, "description": "With tomatoes, cheese and basil"},
            {"name": "Pepperoni", "price": 75000, "description": "With pepperoni sausage and cheese"}
        ],
        "ü•ó Salads": [
            {"name": "Caesar salad", "price": 35000, "description": "With chicken, romaine lettuce, garlic and cheese"},
            {"name": "Greek salad", "price": 30000, "description": "With cucumber, tomatoes, olives and feta cheese"}
        ],
        "üçπ Drinks": [
            {"name": "Coca-Cola", "price": 12000, "description": "0.5L bottle"},
            {"name": "Mineral water", "price": 8000, "description": "0.5L bottle"}
        ]
    }
}

# Yandex Maps API orqali geolokatsiyadan manzil olish
def get_address_from_coords(lat, lon):
    url = f"https://geocode-maps.yandex.ru/1.x/?format=json&geocode={lon},{lat}&apikey={YANDEX_API_KEY}&lang=ru_RU"
    try:
        response = requests.get(url)
        data = response.json()
        if data["response"]["GeoObjectCollection"]["metaDataProperty"]["GeocoderResponseMetaData"]["found"] > 0:
            address = data["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]["metaDataProperty"]["GeocoderMetaData"]["text"]
            return address
        else:
            return None
    except Exception as e:
        logger.error(f"Yandex API xatolik: {e}")
        return None

# /start buyrug'i
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    user_id = user.id
    
    if user_id not in user_data:
        user_data[user_id] = {
            "language": None,
            "cart": [],
            "address": "",
            "phone": "",
            "payment_method": ""
        }
    
    welcome_message = (
        "Assalomu alaykum! Madagaskar Land yetkazib berish xizmatiga xush kelibsiz.\n"
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É –¥–æ—Å—Ç–∞–≤–∫–∏ Madagaskar Land.\n"
        "Hello! Welcome to Madagaskar Land delivery service."
    )
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üá∫üáø O'zbekcha", callback_data="lang_uz")],
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
        [InlineKeyboardButton("üá¨üáß English", callback_data="lang_en")]
    ])
    
    await update.message.reply_text(welcome_message, reply_markup=keyboard)
    return SELECTING_LANGUAGE

# Tugma bosilishini qayta ishlash
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data.startswith("lang_"):
        language = data.split("_")[1]
        user_data[user_id]["language"] = language
        await show_main_menu(query.message, language)
        return MAIN_MENU
    
    elif data == "clear_cart":
        user_data[user_id]["cart"] = []
        language = user_data[user_id]["language"]
        await query.message.reply_text(texts[language]["empty_cart"])
        return MAIN_MENU
    
    elif data == "checkout":
        language = user_data[user_id]["language"]
        keyboard = ReplyKeyboardMarkup(
            [[KeyboardButton(texts[language]["share_location"], request_location=True)],
             [KeyboardButton(texts[language]["back"])]],
            resize_keyboard=True
        )
        await query.message.reply_text(texts[language]["enter_address"], reply_markup=keyboard)
        return ADDRESS_INPUT
    
    elif data.startswith("add_"):
        language = user_data[user_id]["language"]
        _, category, product_index = data.split("_")
        product_index = int(product_index)
        product = products[language][category][product_index]
        user_data[user_id]["cart"].append(product)
        await query.message.reply_text(f"{product['name']} {texts[language]['added_to_cart']}")
        return MAIN_MENU
    
    elif data == "confirm_order":
        global order_counter
        order_counter += 1
        order_id = order_counter
        language = user_data[user_id]["language"]
        cart = user_data[user_id]["cart"]
        total = sum(item["price"] for item in cart)
        order_message = f"*{texts[language]['order_details'].format(order_id=order_id)}*\n\n"
        for i, product in enumerate(cart, 1):
            order_message += f"{i}. {product['name']} - {product['price']} so'm\n"
        order_message += f"\n*{texts[language]['total']}* {total} so'm\n"
        order_message += f"*{texts[language]['address']}* {user_data[user_id]['address']}\n"
        order_message += f"*{texts[language]['phone']}* {user_data[user_id]['phone']}\n"
        order_message += f"*{texts[language]['payment']}* {user_data[user_id]['payment_method']}"
        
        # Foydalanuvchiga xabar
        await query.message.reply_text(texts[language]["order_success"])
        
        # Xodimlar guruhiga yuborish
        try:
            await context.bot.send_message(
                chat_id=GROUP_CHAT_ID,
                text=texts[language]["order_to_group"].format(order_id=order_id, details=order_message),
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"Guruhga xabar yuborishda xatolik: {e}")
        
        user_data[user_id]["cart"] = []
        await show_main_menu(query.message, language)
        return MAIN_MENU
    
    elif data == "cancel_order":
        language = user_data[user_id]["language"]
        await show_main_menu(query.message, language)
        return MAIN_MENU
    
    elif data in ["payment_cash", "payment_click", "payment_payme"]:
        language = user_data[user_id]["language"]
        payment_methods = {
            "payment_cash": texts[language]["payment_cash"],
            "payment_click": texts[language]["payment_click"],
            "payment_payme": texts[language]["payment_payme"]
        }
        user_data[user_id]["payment_method"] = payment_methods[data]
        
        # Buyurtma tasdiqlash
        cart = user_data[user_id]["cart"]
        total = sum(item["price"] for item in cart)
        order_message = f"*{texts[language]['order_details'].format(order_id='Temporary')}*\n\n"
        for i, product in enumerate(cart, 1):
            order_message += f"{i}. {product['name']} - {product['price']} so'm\n"
        order_message += f"\n*{texts[language]['total']}* {total} so'm\n"
        order_message += f"*{texts[language]['address']}* {user_data[user_id]['address']}\n"
        order_message += f"*{texts[language]['phone']}* {user_data[user_id]['phone']}\n"
        order_message += f"*{texts[language]['payment']}* {user_data[user_id]['payment_method']}"
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(texts[language]["confirm_order"], callback_data="confirm_order")],
            [InlineKeyboardButton(texts[language]["cancel_order"], callback_data="cancel_order")]
        ])
        await query.message.reply_text(order_message, reply_markup=keyboard, parse_mode="Markdown")
        return CONFIRM_ORDER

# Asosiy menyu ko'rsatish
async def show_main_menu(message, language):
    keyboard = ReplyKeyboardMarkup([
        [texts[language]["menu"], texts[language]["cart"]],
        [texts[language]["address"], texts[language]["contact"]],
        [texts[language]["info"], texts[language]["settings"]]
    ], resize_keyboard=True)
    
    await message.reply_text(
        f"{texts[language]['welcome']}\n\nMadagaskar Land",
        reply_markup=keyboard
    )

# Menyu kategoriyalari
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    language = user_data[user_id]["language"]
    keyboard = ReplyKeyboardMarkup(categories[language], resize_keyboard=True)
    await update.message.reply_text(texts[language]["categories"], reply_markup=keyboard)
    return MENU_CATEGORY

# Kategoriyadagi mahsulotlarni inline tugmalar sifatida ko'rsatish
async def category_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    language = user_data[user_id]["language"]
    category = update.message.text
    
    if category == texts[language]["back"]:
        await show_main_menu(update.message, language)
        return MAIN_MENU
    
    if category in products[language]:
        buttons = []
        for i, product in enumerate(products[language][category]):
            buttons.append([InlineKeyboardButton(
                f"{product['name']} - {product['price']} so'm",
                callback_data=f"add_{category}_{i}"
            )])
        keyboard = InlineKeyboardMarkup(buttons)
        await update.message.reply_text(
            f"{category}\n\nMahsulotlarni tanlang:",
            reply_markup=keyboard
        )
        return PRODUCT_SELECTION
    
    await update.message.reply_text(texts[language]["unknown_command"])
    return MENU_CATEGORY

# Savatni ko'rsatish
async def cart_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    language = user_data[user_id]["language"]
    cart = user_data[user_id]["cart"]
    
    if not cart:
        await update.message.reply_text(texts[language]["empty_cart"])
        return MAIN_MENU
    
    total = sum(item["price"] for item in cart)
    message = f"*{texts[language]['cart_items']}*\n\n"
    for i, product in enumerate(cart, 1):
        message += f"{i}. {product['name']} - {product['price']} so'm\n"
    message += f"\n*{texts[language]['total']}* {total} so'm"
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(texts[language]["clear_cart"], callback_data="clear_cart")],
        [InlineKeyboardButton(texts[language]["checkout"], callback_data="checkout")]
    ])
    
    await update.message.reply_text(message, reply_markup=keyboard, parse_mode="Markdown")
    return MAIN_MENU

# Manzil kiritish
async def address_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    language = user_data[user_id]["language"]
    
    if update.message.location:
        location = update.message.location
        lat, lon = location.latitude, location.longitude
        # Yandex Maps Geocoder orqali manzil olish
        address = get_address_from_coords(lat, lon)
        if address:
            address_lower = address.lower()
            # Navoiy yoki Karmana so'zlari manzilda borligini tekshirish
            if "navoiy" in address_lower or "karmana" in address_lower:
                user_data[user_id]["address"] = address
                await update.message.reply_text(f"{texts[language]['address_saved']} {address}")
            else:
                await update.message.reply_text(texts[language]["location_invalid"])
                return ADDRESS_INPUT
        else:
            await update.message.reply_text(texts[language]["location_error"])
            return ADDRESS_INPUT
    else:
        text = update.message.text
        if text == texts[language]["back"]:
            await show_main_menu(update.message, language)
            return MAIN_MENU
        text_lower = text.lower()
        if "navoiy" in text_lower or "karmana" in text_lower:
            user_data[user_id]["address"] = text
            await update.message.reply_text(f"{texts[language]['address_saved']} {text}")
        else:
            await update.message.reply_text(texts[language]["address_invalid"])
            return ADDRESS_INPUT
    
    keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton(texts[language]["share_contact"], request_contact=True)],
         [KeyboardButton(texts[language]["back"])]],
        resize_keyboard=True
    )
    await update.message.reply_text(texts[language]["enter_phone"], reply_markup=keyboard)
    return PHONE_INPUT

# Telefon raqamini kiritish
async def phone_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    language = user_data[user_id]["language"]
    
    if update.message.contact:
        phone = update.message.contact.phone_number
        user_data[user_id]["phone"] = phone
    else:
        text = update.message.text
        if text == texts[language]["back"]:
            keyboard = ReplyKeyboardMarkup(
                [[KeyboardButton(texts[language]["share_location"], request_location=True)],
                 [KeyboardButton(texts[language]["back"])]],
                resize_keyboard=True
            )
            await update.message.reply_text(texts[language]["enter_address"], reply_markup=keyboard)
            return ADDRESS_INPUT
        user_data[user_id]["phone"] = text
    
    await update.message.reply_text(f"{texts[language]['phone_saved']} {user_data[user_id]['phone']}")
    
    # To'lov usulini tanlash
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(texts[language]["payment_cash"], callback_data="payment_cash")],
        [InlineKeyboardButton(texts[language]["payment_click"], callback_data="payment_click")],
        [InlineKeyboardButton(texts[language]["payment_payme"], callback_data="payment_payme")]
    ])
    await update.message.reply_text(texts[language]["select_payment"], reply_markup=keyboard)
    return PAYMENT_METHOD

# Aloqa ma'lumotlari
async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    language = user_data[user_id]["language"]
    await update.message.reply_text(
        f"*{texts[language]['contact_info']}*\n\n"
        f"{texts[language]['phone']} +998 99 159 22 22\n"
        f"{texts[language]['telegram']} @madagaskarland\n"
        f"{texts[language]['website']} www.madagaskarland.uz\n"
        f"{texts[language]['location']} Navoiy sh., Karmana tumani",
        parse_mode="Markdown"
    )
    return MAIN_MENU

# Bot haqida ma'lumot
async def info_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    language = user_data[user_id]["language"]
    await update.message.reply_text(
        f"*{texts[language]['about_bot']}*\n\n"
        f"{texts[language]['about_text']}",
        parse_mode="Markdown"
    )
    return MAIN_MENU

# Sozlamalar
async def settings_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    language = user_data[user_id]["language"]
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üá∫üáø O'zbekcha", callback_data="lang_uz")],
        [InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
        [InlineKeyboardButton("üá¨üáß English", callback_data="lang_en")]
    ])
    await update.message.reply_text(texts[language]["select_language"], reply_markup=keyboard)
    return SELECTING_LANGUAGE

# Xabarlarni qayta ishlash
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    if user_id not in user_data or user_data[user_id]["language"] is None:
        await start(update, context)
        return SELECTING_LANGUAGE
    
    language = user_data[user_id]["language"]
    text = update.message.text
    
    if text == texts[language]["menu"]:
        return await menu_handler(update, context)
    elif text == texts[language]["cart"]:
        return await cart_handler(update, context)
    elif text == texts[language]["address"]:
        keyboard = ReplyKeyboardMarkup(
            [[KeyboardButton(texts[language]["share_location"], request_location=True)],
             [KeyboardButton(texts[language]["back"])]],
            resize_keyboard=True
        )
        await update.message.reply_text(texts[language]["enter_address"], reply_markup=keyboard)
        return ADDRESS_INPUT
    elif text == texts[language]["contact"]:
        return await contact_handler(update, context)
    elif text == texts[language]["info"]:
        return await info_handler(update, context)
    elif text == texts[language]["settings"]:
        return await settings_handler(update, context)
    
    for row in categories[language]:
        if text in row:
            return await category_handler(update, context)
    
    await update.message.reply_text(texts[language]["unknown_command"])
    return MAIN_MENU

# Xatolarni qayta ishlash
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(f"Update {update} caused error {context.error}")
    if update and update.effective_user:
        user_id = update.effective_user.id
        if user_id in user_data and user_data[user_id]["language"]:
            language = user_data[user_id]["language"]
            await update.message.reply_text("Xatolik yuz berdi. Iltimos, qayta urinib ko'ring.")
        else:
            await update.message.reply_text("An error occurred. Please try again.")

# Botni ishga tushirish
def main() -> None:
    application = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECTING_LANGUAGE: [CallbackQueryHandler(button_handler, pattern="^lang_")],
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
                        CallbackQueryHandler(button_handler)],
            MENU_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, category_handler)],
            PRODUCT_SELECTION: [CallbackQueryHandler(button_handler, pattern="^add_"),
                               MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)],
            ADDRESS_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, address_handler),
                           MessageHandler(filters.LOCATION, address_handler)],
            PHONE_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone_handler),
                         MessageHandler(filters.CONTACT, phone_handler)],
            PAYMENT_METHOD: [CallbackQueryHandler(button_handler, pattern="^payment_")],
            CONFIRM_ORDER: [CallbackQueryHandler(button_handler, pattern="^(confirm_order|cancel_order)")]
        },
        fallbacks=[CommandHandler("start", start)]
    )
    
    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)
    
    logger.info("Bot ishga tushdi...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    if not TOKEN:
        raise ValueError("Iltimos, BOT_TOKEN ni o'rnating!")
    if GROUP_CHAT_ID == "GURUH_CHAT_ID":
        raise ValueError("Iltimos, GROUP_CHAT_ID ni o'rnating!")
    if not YANDEX_API_KEY:
        raise ValueError("Iltimos, YANDEX_API_KEY ni o'rnating!")
    main()